(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{340:function(a,t,e){"use strict";e.r(t);var r=e(14),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"【题】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#【题】"}},[a._v("#")]),a._v(" 【题】")]),a._v(" "),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" webpack")]),a._v(" "),t("p",[a._v("loader、plugin、entry、output、mode、\nentryOption、run、compile、compilation、make、emit、done")]),a._v(" "),t("p",[a._v("entryOption：开始解析配置文件时触发。\nrun：构建开始时触发。\ncompile：开始编译时触发。\ncompilation：编译过程中触发。\nmake：执行构建任务时触发。\nafterCompile：编译完成时触发。\nemit：生成资源并输出到目标文件夹前触发。\nafterEmit：输出完成后触发。\ndone：打包完成时触发。")]),a._v(" "),t("h2",{attrs:{id:"webpack优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack优化"}},[a._v("#")]),a._v(" webpack优化")]),a._v(" "),t("p",[a._v("include、exclude减少 loader搜索范围\nbabel-loader开启缓存\nthread-loader、Happypack将 loader 由单进程转为多进程\nDllPlugin第三方库单独打包，避免每次构建不常用的库\n开启treeshaking")]),a._v(" "),t("h2",{attrs:{id:"webpack4-5区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack4-5区别"}},[a._v("#")]),a._v(" webpack4 5区别")]),a._v(" "),t("p",[a._v("性能提升 更快构建更小体积、持久化缓存（存在磁盘而非内存中，不仅在一次构建中有效）、模块联邦")]),a._v(" "),t("h2",{attrs:{id:"cookie传输安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie传输安全"}},[a._v("#")]),a._v(" Cookie传输安全")]),a._v(" "),t("p",[a._v("使用https、设置HttpOnly、SameSite属性，设置过期时间（max-age）、内容进行加密")]),a._v(" "),t("h2",{attrs:{id:"vue优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue优化"}},[a._v("#")]),a._v(" vue优化")]),a._v(" "),t("p",[a._v("v-for 使用唯一的 key\n使用 computed\nkeep-alive 缓存\n路由、组件懒加载\n虚拟列表/懒加载")]),a._v(" "),t("h2",{attrs:{id:"vue通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue通信"}},[a._v("#")]),a._v(" vue通信")]),a._v(" "),t("p",[a._v("props、emit\n总线 event.$emit、vuex、$parent、$refs、$attr（props和emit候补）、provide、inject(动态数据 computed)")]),a._v(" "),t("h2",{attrs:{id:"vue-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期"}},[a._v("#")]),a._v(" vue 生命周期")]),a._v(" "),t("p",[a._v("父组件先实例化\n子组件先渲染完")]),a._v(" "),t("h2",{attrs:{id:"mixins顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mixins顺序"}},[a._v("#")]),a._v(" mixins顺序")]),a._v(" "),t("p",[a._v("冲突时以组件数据优先\n钩子函数在组件之前按顺序调用")]),a._v(" "),t("h2",{attrs:{id:"ssg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssg"}},[a._v("#")]),a._v(" ssg")]),a._v(" "),t("p",[a._v("SSG 在构建时生成完整的静态 HTML 文件，这些文件包含了整个网站的内容。这些文件之后可以直接被服务器提供给用户，不需要在每次请求时动态生成。 适用于内容不频繁变化的网站，容易进行缓存和分发")]),a._v(" "),t("h2",{attrs:{id:"工程化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工程化"}},[a._v("#")]),a._v(" 工程化")]),a._v(" "),t("p",[a._v("概念：前端工程化是一个体系，以项目迭代过程中的前端开发为主要服务对象，涉及开发、构建、测试、部署等环境，通过一系列和工具和规范，目标是提高效率、规范和性能。 脚手架、cicd、自动化测试工具等")]),a._v(" "),t("h2",{attrs:{id:"currenttarget、target"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#currenttarget、target"}},[a._v("#")]),a._v(" currentTarget、target")]),a._v(" "),t("p",[a._v("target 始终表示事件的起源，而 currentTarget 表示当前正在处理事件的元素")]),a._v(" "),t("h2",{attrs:{id:"flex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[a._v("#")]),a._v(" flex")]),a._v(" "),t("p",[a._v("flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto\nauto (1 1 auto)\n1 (1 1 0)\nnone (0 0 auto)。\n0 (0 0 0)")]),a._v(" "),t("h2",{attrs:{id:"mvvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[a._v("#")]),a._v(" mvvm")]),a._v(" "),t("p",[a._v("数据驱动视图，视图响应改变数据")]),a._v(" "),t("h2",{attrs:{id:"router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[a._v("#")]),a._v(" router")]),a._v(" "),t("p",[a._v("监听hashchange、history.popstate pushState\nhash模式改变不用发请求到服务器，history模式需要后端配合，否则会404")]),a._v(" "),t("h2",{attrs:{id:"seo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seo"}},[a._v("#")]),a._v(" seo")]),a._v(" "),t("p",[a._v("可以使用预渲染的方式生成静态html，提高性能减少负担，对爬虫更友好")]),a._v(" "),t("h2",{attrs:{id:"react、vue区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react、vue区别"}},[a._v("#")]),a._v(" react、vue区别")]),a._v(" "),t("p",[a._v("vue基于响应式，reactt需要手动setState更新\nreact基于状态，单项数据流")]),a._v(" "),t("p",[a._v("函数式编程 不可变性、无副作用\nreact函数式编程较为灵活，适合复杂大型应用")]),a._v(" "),t("h2",{attrs:{id:"为什么异步渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么异步渲染"}},[a._v("#")]),a._v(" 为什么异步渲染")]),a._v(" "),t("p",[a._v("如果同步进行会占用大量的主线程资源，导致页面卡顿、响应变慢；所以采用异步渲染的方式，将变化收集到异步队列中统一更新，可以避免阻塞主线程，提高页面性能和流畅度。")]),a._v(" "),t("h2",{attrs:{id:"src和href"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#src和href"}},[a._v("#")]),a._v(" src和href")]),a._v(" "),t("p",[a._v("src会替换当前元素，href用于在文档和引用资源之间建立联系。\nsrc会阻塞后续一些资源的加载")]),a._v(" "),t("h2",{attrs:{id:"收获"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#收获"}},[a._v("#")]),a._v(" 收获")]),a._v(" "),t("p",[a._v("面对这种线上问题不仅要建立监控，能即时把控项目情况，还需要建立可靠的流程和系统第一时间控制并消除影响")]),a._v(" "),t("h2",{attrs:{id:"wacher"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wacher"}},[a._v("#")]),a._v(" wacher")]),a._v(" "),t("p",[a._v("computed watcher：computed 对应计算属性的watcher\nrender watcher：组件中数据的变化\nuser watcher：监听属性变化 执行响应回调（一些异步任务etc）")]),a._v(" "),t("h2",{attrs:{id:"垂直居中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垂直居中"}},[a._v("#")]),a._v(" 垂直居中")]),a._v(" "),t("p",[a._v("flex布局 设置justify-content 和 align-items\ngrid布局   place-items: center\nmargin: 0 auto\n绝对定位 + 负边距\ncalc 计算\ntext-align: center 居")]),a._v(" "),t("h2",{attrs:{id:"jsbridge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsbridge"}},[a._v("#")]),a._v(" jsbridge")]),a._v(" "),t("p",[a._v("注入api 例如window对象（一般都是同步的）\n劫持 url scheme。兼容性更好\n如 iframe.src 发送 URL Scheme 请求，之后 Native 拦截到请求并根据 URL Scheme 和 携带的参数 进行对应操作。")]),a._v(" "),t("p",[a._v("postMessage进行通讯，前端监听message")]),a._v(" "),t("h2",{attrs:{id:"requestanimationframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe"}},[a._v("#")]),a._v(" requestAnimationFrame")]),a._v(" "),t("p",[a._v("定时器运行时间不稳定，不能稳定触发准时渲染")]),a._v(" "),t("h2",{attrs:{id:"硬件加速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#硬件加速"}},[a._v("#")]),a._v(" 硬件加速")]),a._v(" "),t("p",[a._v("transform（ translate3d、translateZ(0)等）\nopacity\nfilter（滤镜：drop-shadow()、opacity()，函数与已有的box-shadow、opacity属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速）\nwill-change：哪一个属性即将发生变化，进而进行优化。")]),a._v(" "),t("h2",{attrs:{id:"http版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http版本"}},[a._v("#")]),a._v(" http版本")]),a._v(" "),t("h2",{attrs:{id:"响应式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[a._v("#")]),a._v(" 响应式")]),a._v(" "),t("h2",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[a._v("#")]),a._v(" session")]),a._v(" "),t("p",[a._v('在新标签或窗口打开一个页面时会复制顶级浏览会话的上下文作为新会话的上下文， 这点和 session cookies 的运行方式不同。\nwindow.open("同源页面") 或者a标签新开的页面会')]),a._v(" "),t("h2",{attrs:{id:"keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[a._v("#")]),a._v(" keep-alive")]),a._v(" "),t("ol",[t("li",[a._v("根据 include 和 exclude 判断当前组件是否需要被缓存")]),a._v(" "),t("li",[a._v("命中缓存则直接获取，同时更新 key 的位置。\n根据组件 id 和 tag 生成缓存 key，去缓存对象("),t("strong",[a._v("this.cache")]),a._v(")中查找是否存在，存在则取出缓存值并更新该 key在 keys 中的位置**（更新key的位置是实现LRU置换策略的关键）**")]),a._v(" "),t("li",[a._v("未命中缓存则设置进入缓存，同时检查缓存的实例是否超过 max 值，如果超过 max，则删除 this.cache 中第一个实例")]),a._v(" "),t("li",[a._v("将已缓存的实例 keepAlive 设置为 true，这样下次渲染组件不会执行 created 和 mounted 钩子")])]),a._v(" "),t("h2",{attrs:{id:"强缓存失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存失效"}},[a._v("#")]),a._v(" 强缓存失效")]),a._v(" "),t("p",[a._v("手动刷新强缓存失效\nctrl+f5强缓存协商缓存失效")]),a._v(" "),t("h2",{attrs:{id:"inp和fid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inp和fid"}},[a._v("#")]),a._v(" inp和fid")]),a._v(" "),t("p",[a._v("FID 只上报用户第一次与页面交互的响应性\ninp是从交互到下一次绘制的延时")]),a._v(" "),t("h2",{attrs:{id:"异常捕获"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常捕获"}},[a._v("#")]),a._v(" 异常捕获")]),a._v(" "),t("h2",{attrs:{id:"babel原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel原理"}},[a._v("#")]),a._v(" babel原理")]),a._v(" "),t("p",[a._v("将 JS 代码转换为 AST，对其进行遍历转译操作，最终输出编译后的 JS 代码。")]),a._v(" "),t("h2",{attrs:{id:"小程序性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小程序性能优化"}},[a._v("#")]),a._v(" 小程序性能优化")]),a._v(" "),t("p",[a._v("小程序本身是双线程架构，渲染层和逻辑层相互独立，通过微信原生中的JSBridge进行通信，因此性能的损耗主要花费在通信过程中。而在通信过程中影响性能的点最主要的则是setData的频率和数据量。\n所以主要做的优化手段就是去减少setData的次数，同时当setData数据量过大时对数据量进行拆分，分为多个setData去执行，从这两者中找到一个平衡。\n除此之外，还利用了Wxml节点压缩，CSS样式合并，以及请求预加载等方式进行性能优化。")]),a._v(" "),t("h2",{attrs:{id:"热更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热更新"}},[a._v("#")]),a._v(" 热更新")]),a._v(" "),t("p",[a._v("webpack启动了一个本地开发服务器，和浏览器维护了一个websocket进行通信。本地资源变化后推送更新")]),a._v(" "),t("h2",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[a._v("#")]),a._v(" git")]),a._v(" "),t("p",[a._v("rebase 用于整理提交历史，将一条分支上的提交应用到另一条分支上。\nreset 用于撤销提交或者移动 HEAD 指针到指定的提交，有不同的模式来处理更改。\nrevert 用于撤销某个提交的修改，创建一个新的提交来撤销这些更改，不改变提交历史。")]),a._v(" "),t("h2",{attrs:{id:"_7层模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7层模型"}},[a._v("#")]),a._v(" 7层模型")]),a._v(" "),t("p",[a._v("应用层：为应用程序提供网络服务\n表示层：数据格式化、加解密\n会话层：管理会话 为应用程序之间的通信提供协调\n传输层：提供端到端的通信，负责确保数据的可靠性和完整性\n网络层：寻址和路由选择\n链路层：定义了帧的传输进行错误检测和纠正、流量控制\n物理层：控制硬件")]),a._v(" "),t("h2",{attrs:{id:"cdn回源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn回源"}},[a._v("#")]),a._v(" cdn回源")]),a._v(" "),t("p",[a._v("内容分发网络(缓存静态内容、就近访问、负载均衡)\n回源 就是说 CDN 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。\n预热：将内容缓存到cdn边缘服务器")]),a._v(" "),t("h2",{attrs:{id:"tcp、udp区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp、udp区别"}},[a._v("#")]),a._v(" tcp、udp区别")]),a._v(" "),t("p",[a._v("连接性：tcp必须建立握手连接，保证通信可靠\n可靠性：数据包丢失会尝试重新发送\n顺序性：保证数据有序，接受到的和发送的数据包顺序一样\n流量控制：\nudp支持广播")]),a._v(" "),t("p",[a._v("tcp适用于对数据可靠性较高的场景，udp适用于实时性较高的场景\ntcp特点：确认、重传、流量控制机制")]),a._v(" "),t("h2",{attrs:{id:"webworker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webworker"}},[a._v("#")]),a._v(" webworker")]),a._v(" "),t("p",[a._v("处理一些耗时的计算任务，利用多核的效率；不会阻塞主线程；通过postmessage进行通信\nDedicated Workers和Shared Workers")])])}),[],!1,null,null,null);t.default=s.exports}}]);