(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{342:function(_,v,t){"use strict";t.r(v);var a=t(14),i=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"浏览器渲染"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染"}},[_._v("#")]),_._v(" 浏览器渲染")]),_._v(" "),v("p",[_._v("页面是采用流式布局来绘制，左到右，上到下。")]),_._v(" "),v("img",{attrs:{src:_.$withBase("/浏览器/DOM渲染.webp")}}),_._v(" "),v("blockquote",[v("p",[_._v("window.onload 页面全部资源加载完成，包括图片视频等\nDOMContentLoaded DOM渲染完即可执行")])]),_._v(" "),v("h2",{attrs:{id:"_1、url输入到页面展示"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、url输入到页面展示"}},[_._v("#")]),_._v(" 1、URL输入到页面展示")]),_._v(" "),v("ol",[v("li",[_._v("构建请求")]),_._v(" "),v("li",[_._v("查找强缓存")]),_._v(" "),v("li",[_._v("域名解析，找到服务地址")]),_._v(" "),v("li",[_._v("建立 TCP 连接")]),_._v(" "),v("li",[_._v("发送 HTTP 请求")]),_._v(" "),v("li",[_._v("解析文档并构建 DOM 树： 将字节数据转为字符串，再通过解释器构建节点形成 DOM 树和 CSSOM 树")]),_._v(" "),v("li",[_._v("布局渲染树：从 DOM 树的根节点开始遍历每个可见节点，并根据 CSSOM 树中对应的规则组合生成渲染树，")]),_._v(" "),v("li",[_._v("Layout&Reflow：根据生成的渲染树，进行回流，计算个元素的尺寸、位置")]),_._v(" "),v("li",[_._v("Painting：得到各节点的像素信息")]),_._v(" "),v("li",[_._v("GPU将各层合成，显示在屏幕上")])]),_._v(" "),v("h2",{attrs:{id:"_2、页面更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、页面更新"}},[_._v("#")]),_._v(" 2、页面更新")]),_._v(" "),v("p",[_._v("页面更新时机由浏览器控制，当 Eventloop 执行完 Microtasks 后浏览器会判断是否需要更新。")]),_._v(" "),v("img",{attrs:{src:_.$withBase("/浏览器/页面更新.png")}}),_._v(" "),v("ul",[v("li",[_._v("JavaScript：JavaScript 实现动画效果，DOM 元素操作等")]),_._v(" "),v("li",[_._v("Style（计算样式）：确定每个 DOM 元素应该应用什么 CSS 规则")]),_._v(" "),v("li",[_._v("Layout（布局）：计算每个 DOM 元素在最终屏幕上显示的大小和位置。由于 web 页面的元素布局是相对的。")]),_._v(" "),v("li",[_._v("Paint（绘制）：在多个层上绘制 DOM 元素的的文字、颜色、图像、边框和阴影等")]),_._v(" "),v("li",[_._v("Composite（渲染层合并）：按照合理的顺序合并图层然后显示到屏幕上")])]),_._v(" "),v("blockquote",[v("p",[_._v("页面更新前会先触发 requestAnimationFrame 的回调，再计算样式并更新页面")])]),_._v(" "),v("h2",{attrs:{id:"_3、回流与重绘"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、回流与重绘"}},[_._v("#")]),_._v(" 3、回流与重绘")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("回流指元素的"),v("strong",[_._v("空间属性")]),_._v("发生变化，重新进行收集节点信息对受影响的元素进行绘制。")])]),_._v(" "),v("li",[v("p",[_._v("重绘指的是对"),v("strong",[_._v("元素的外观")]),_._v("做处理，比如颜色、背景、阴影等。")])])]),_._v(" "),v("p",[_._v("回流一定触发重绘。")]),_._v(" "),v("p",[_._v("触发回流的动作：")]),_._v(" "),v("ol",[v("li",[_._v("添加或删除可见的DOM元素")]),_._v(" "),v("li",[_._v("元素的位置发生变化")]),_._v(" "),v("li",[_._v("元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）")]),_._v(" "),v("li",[_._v("内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。")]),_._v(" "),v("li",[_._v("页面最初开始渲染的时候")]),_._v(" "),v("li",[_._v("浏览器的窗口尺寸变化（回流是根据视口的大小来计算元素的位置和大小的）")]),_._v(" "),v("li",[_._v("获取位置信息，需要回流计算最新的值")])]),_._v(" "),v("h2",{attrs:{id:"_4、gpu加速"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、gpu加速"}},[_._v("#")]),_._v(" 4、GPU加速")]),_._v(" "),v("p",[_._v("开启后 GPU 加速后，会将对应需要进行动画的元素 DOM 元素提升为独立的渲染层，它的变化不会再影响文档流中的布局（避免回流重绘）。"),v("br"),_._v("\n浏览器在一帧里面，会依次执行以下这些动作")]),_._v(" "),v("blockquote",[v("p",[_._v("利用 GPU 加速优先使用渲染层合并属性，减少 layout，paint 的触发。如通过改变元素的 transform 实现移动、伸缩变换而非改变物体的 left，top，width，height属性。如果动画并不需要对 transform 和 opacity 属性做出改变，也可以使用其他的方法强制浏览器为这些元素创建单独的层。")])]),_._v(" "),v("p",[_._v("以下属性可以触发 GPU 加速")]),_._v(" "),v("ul",[v("li",[_._v("transform: translateZ()")]),_._v(" "),v("li",[_._v("opacity")]),_._v(" "),v("li",[_._v("filters")]),_._v(" "),v("li",[_._v("Will-change")])])])}),[],!1,null,null,null);v.default=i.exports}}]);